version: "3"
services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    ports:
      - "80:80"
      - "443:443"
      # (Optional) Expose Dashboard
      - "8080:8080"  # Don't do this in production!
    volumes:
      - ./traefik:/etc/traefik
      - traefik-ssl-certs:/ssl-certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app_network
  web:
    build: 
      dockerfile: Dockerfile
      context: .
    labels:
      - traefik.enable=true
      # - traefik.docker.network=app_network
      # - traefik.constraint-label=app_network
      - traefik.http.routers.web.entrypoints=web
      - traefik.http.routers.web.rule=Host(`web3.tyi.name`)
    ports:
      - "9000-9002:5000"
    scale: 3
    networks:
      - app_network
      - backend_network
    volumes:
      - .:/code
    environment:
      FLASK_DEBUG: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health"]
      interval: 2s
      timeout: 5s
      start_period: 10s
      retries: 30
    depends_on:
      redis:
        condition: service_healthy

  redis:
    image: "redis:alpine"
    volumes:
      - type: volume
        source: mydata
        target: /data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 1s
      timeout: 3s
      start_period: 5s
      retries: 30

volumes:
  mydata:
  traefik-ssl-certs:
    driver: local

networks:
  app_network:
  backend_network:
    internal: true